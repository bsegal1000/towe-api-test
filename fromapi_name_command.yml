---
# Run commands from API
- hosts: localhost
  gather_facts: no

  vars:
    hostcmd_info:
      - "host": "test_sshd_1"
        "cmd": "bXNnPSJTdWNjZXNzIjtpZiBbICEgLWQgJEhPTUUgXTsgdGhlbiBlY2hvICRtc2c7ZXhpdCAwOyBlbHNlIG1zZz0iRmFpbHVyZSI7IGVjaG8gJG1zZyA+JjI7IGV4aXQgMTtmaQ=="
      - "host": "test_sshd_2"
        "cmd": "bHMgLWx0ciAkSE9NRQ=="
    user_to_run: root
    creds:
      - 10
  tasks:
  
    - name: set match fact
      set_fact:
#         windows_group: "{{ 'windows-dev' if (ansible_playbook_name | select('match','.*blahger.*')) else 'windows-prod' }}"
        windows_group: "{{ 'windows-dev' if ( 'tower-api' in tower_job_template_name ) else 'windows-prod' }}"

    - debug:
        msg:
          - "windows_group is {{ windows_group }}"
          - "tower job template is {{ tower_job_template_name }}"

    - name: Add hosts to group
      add_host:
        groups: group_to_use
        hostname: "{{ item['host'] }}"
        command_to_run: "{{ item['cmd'] }}"
#        user_to_run: "{{ hostcmd_info[item]['user_to_run'] }}"
      loop: "{{ hostcmd_info }}"
      
    - name: Set hostcmd_dict fact
      set_fact:
         hostcmd_dict: '{{ hostcmd_dict | default({}) | combine( { item["host"]: item["cmd"] } ) }}'
      loop: "{{ hostcmd_info }}"

- hosts: group_to_use
  gather_facts: no
  become: yes
  become_user: "{{ user_to_become }}"

  vars:
#     command_to_run_dec64: "{{ command_to_run | b64decode | string}}"
     command_to_run_dec64: "{{ hostvars['localhost']['hostcmd_dict'][ansible_host] | b64decode | string}}"

  tasks:

    - name: Gather subset of facts
      setup:
        gather_subset: '!all'

    - name: Block for Linux or Windows execution
      block:
        - include_tasks: tasks/cmds-tasks-{{ ansible_system }}.yml

      always:
                  
        - debug:
            msg:
              - "Command run was {{ command_to_run_dec64 }}"
              - "Stdout was {{ cmdout.stdout_lines if cmdout.stdout_lines is defined else ''}}"
              - "Stderr was {{ cmdout.stderr_lines if cmdout.stderr_lines is defined else ''}}"
              - "RC was {{ cmdout.rc if cmdout.rc is defined else '' }}"
              - "env is {{ envout.stdout_lines }}"
              - "tower job template name is {{ tower_job_template_name if tower_job_template_name is defined else '' }}"
              - "windows group is {{ windows_group }}"
              

        - name: Set Tower WF Response
          set_fact:
            tower_wf_response: '{{ tower_wf_response | default({}) |
                                   combine(
                                     {
                                      "cmd": command_to_run_dec64,
                                      "stdout": cmdout.stdout_lines if cmdout.stdout_lines is defined else cmdout.msg if cmdout.msg is defined else "",
                                      "stderr": cmdout.stderr_lines if cmdout.stderr_lines is defined else "",
                                      "start": cmdout.start if cmdout.start is defined else "",
                                      "end": cmdout.end if cmdout.end is defined else "",
                                      "system": ansible_system,
                                      "ansible_host": ansible_host,
                                      "inventory_hostname_short": inventory_hostname_short,
                                      "rc": cmdout.rc if cmdout.rc is defined else ""
                                     }
                                   )
                                }}'

        - name: Tower response facts in JSON for job events fetch
          set_fact:
            svalue: value
          with_items:
            - "{{ tower_wf_response | to_json }}"
...
